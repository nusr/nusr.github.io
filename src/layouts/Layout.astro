---
import { LOCALE, SITE, TRACK_CONFIG } from "@config";
import "@styles/base.css";
import { ViewTransitions } from "astro:transitions";

const googleSiteVerification = import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION;

export interface Props {
  title?: string;
  author?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDate?: Date;
  modDate?: Date | null;
  scrollSmooth?: boolean;
}

const {
  title = SITE.title,
  author = SITE.author,
  description = SITE.desc,
  ogImage = SITE.ogImage,
  canonicalURL = new URL(Astro.url.pathname, Astro.site).href,
  pubDate,
  modDate,
  scrollSmooth = false,
} = Astro.props;

const socialImageURL = new URL(
  ogImage ?? SITE.ogImage ?? "og.png",
  Astro.url.origin,
).href;
---

<!doctype html>
<html
  lang=`${LOCALE.lang ?? "en"}`
  class={`${scrollSmooth && "scroll-smooth"}`}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Article Published/Modified time -->
    {
      pubDate && (
        <meta
          property="article:published_time"
          content={pubDate.toISOString()}
        />
      )
    }
    {
      modDate && (
        <meta
          property="article:modified_time"
          content={modDate.toISOString()}
        />
      )
    }

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />

    <meta name="theme-color" content="" />

    {
      // If PUBLIC_GOOGLE_SITE_VERIFICATION is set in the environment variable,
      // include google-site-verification tag in the heading
      // Learn more: https://support.google.com/webmasters/answer/9008080#meta_tag_verification&zippy=%2Chtml-tag
      googleSiteVerification && (
        <meta
          name="google-site-verification"
          content={googleSiteVerification}
        />
      )
    }

    <ViewTransitions />
  </head>
  <body>
    <slot />
    <script is:inline src="/toggle-theme.js" async></script>
    <script async define:vars={{ apiKey: TRACK_CONFIG.amplitudeApiKey }}>
      !(function () {
        "use strict";
        !(function (e, t, amplitudeApiKey) {
          if (!amplitudeApiKey) {
            return;
          }
          var n = e.amplitude || { _q: [], _iq: {} };
          if (n.invoked)
            e.console &&
              console.error &&
              console.error("Amplitude snippet has been loaded.");
          else {
            var r = function (e, t) {
                e.prototype[t] = function () {
                  return (
                    this._q.push({
                      name: t,
                      args: Array.prototype.slice.call(arguments, 0),
                    }),
                    this
                  );
                };
              },
              s = function (e, t, n) {
                return function (r) {
                  e._q.push({
                    name: t,
                    args: Array.prototype.slice.call(n, 0),
                    resolve: r,
                  });
                };
              },
              o = function (e, t, n) {
                e[t] = function () {
                  if (n)
                    return {
                      promise: new Promise(
                        s(e, t, Array.prototype.slice.call(arguments)),
                      ),
                    };
                };
              },
              i = function (e) {
                for (var t = 0; t < m.length; t++) o(e, m[t], !1);
                for (var n = 0; n < g.length; n++) o(e, g[n], !0);
              };
            n.invoked = !0;
            var u = t.createElement("script");
            (u.type = "text/javascript"),
              (u.integrity =
                "sha384-x0ik2D45ZDEEEpYpEuDpmj05fY91P7EOZkgdKmq4dKL/ZAVcufJ+nULFtGn0HIZE"),
              (u.crossOrigin = "anonymous"),
              (u.async = !0),
              (u.src =
                "https://cdn.amplitude.com/libs/analytics-browser-2.0.0-min.js.gz"),
              (u.onload = function () {
                e.amplitude.runQueuedFunctions ||
                  console.log("[Amplitude] Error: could not load SDK");
              });
            var a = t.getElementsByTagName("script")[0];
            a.parentNode.insertBefore(u, a);
            for (
              var c = function () {
                  return (this._q = []), this;
                },
                p = [
                  "add",
                  "append",
                  "clearAll",
                  "prepend",
                  "set",
                  "setOnce",
                  "unset",
                  "preInsert",
                  "postInsert",
                  "remove",
                  "getUserProperties",
                ],
                l = 0;
              l < p.length;
              l++
            )
              r(c, p[l]);
            n.Identify = c;
            for (
              var d = function () {
                  return (this._q = []), this;
                },
                f = [
                  "getEventProperties",
                  "setProductId",
                  "setQuantity",
                  "setPrice",
                  "setRevenue",
                  "setRevenueType",
                  "setEventProperties",
                ],
                v = 0;
              v < f.length;
              v++
            )
              r(d, f[v]);
            n.Revenue = d;
            var m = [
                "getDeviceId",
                "setDeviceId",
                "getSessionId",
                "setSessionId",
                "getUserId",
                "setUserId",
                "setOptOut",
                "setTransport",
                "reset",
                "extendSession",
              ],
              g = [
                "init",
                "add",
                "remove",
                "track",
                "logEvent",
                "identify",
                "groupIdentify",
                "setGroup",
                "revenue",
                "flush",
              ];
            i(n),
              (n.createInstance = function (e) {
                return (n._iq[e] = { _q: [] }), i(n._iq[e]), n._iq[e];
              }),
              (e.amplitude = n);
          }
        })(window, document, apiKey);
      })();
      if (apiKey) {
        amplitude.init(apiKey);
      }
    </script>
    <script async define:vars={{ id: TRACK_CONFIG.gaId }}>
      (function (context, trackingId, options) {
        if (!trackingId) {
          return;
        }
        const history = context.history;
        const doc = document;
        const nav = navigator || {};
        const storage = localStorage;
        const encode = encodeURIComponent;
        const pushState = history.pushState;
        const typeException = "exception";
        const generateId = () => Math.random().toString(36);
        const getId = () => {
          if (!storage.cid) {
            storage.cid = generateId();
          }
          return storage.cid;
        };
        const serialize = (obj) => {
          var str = [];
          for (var p in obj) {
            if (obj.hasOwnProperty(p)) {
              if (obj[p] !== undefined) {
                str.push(encode(p) + "=" + encode(obj[p]));
              }
            }
          }
          return str.join("&");
        };
        const track = (
          type,
          eventCategory,
          eventAction,
          eventLabel,
          eventValue,
          exceptionDescription,
          exceptionFatal,
        ) => {
          const url = "https://www.google-analytics.com/collect";
          const data = serialize({
            v: "1",
            ds: "web",
            aip: options.anonymizeIp ? 1 : undefined,
            tid: trackingId,
            cid: getId(),
            t: type || "pageview",
            sd:
              options.colorDepth && screen.colorDepth
                ? `${screen.colorDepth}-bits`
                : undefined,
            dr: doc.referrer || undefined,
            dt: doc.title,
            dl:
              doc.location.origin + doc.location.pathname + doc.location.search,
            ul: options.language
              ? (nav.language || "").toLowerCase()
              : undefined,
            de: options.characterSet ? doc.characterSet : undefined,
            sr: options.screenSize
              ? `${(context.screen || {}).width}x${(context.screen || {}).height}`
              : undefined,
            vp:
              options.screenSize && context.visualViewport
                ? `${(context.visualViewport || {}).width}x${(context.visualViewport || {}).height}`
                : undefined,
            ec: eventCategory || undefined,
            ea: eventAction || undefined,
            el: eventLabel || undefined,
            ev: eventValue || undefined,
            exd: exceptionDescription || undefined,
            exf:
              typeof exceptionFatal !== "undefined" &&
              !!exceptionFatal === false
                ? 0
                : undefined,
          });

          if (nav.sendBeacon) {
            nav.sendBeacon(url, data);
          } else {
            var xhr = new XMLHttpRequest();
            xhr.open("POST", url, true);
            xhr.send(data);
          }
        };
        const trackEvent = (category, action, label, value) =>
          track("event", category, action, label, value);
        const trackException = (description, fatal) =>
          track(typeException, null, null, null, null, description, fatal);
        history.pushState = function (state) {
          if (typeof history.onpushstate == "function") {
            history.onpushstate({ state: state });
          }
          setTimeout(track, options.delay || 10);
          return pushState.apply(history, arguments);
        };
        track();
        context.ma = {
          trackEvent,
          trackException,
        };
      })(window, id, {
        anonymizeIp: true,
        colorDepth: true,
        characterSet: true,
        screenSize: true,
        language: true,
      });
    </script>
  </body>
</html>
