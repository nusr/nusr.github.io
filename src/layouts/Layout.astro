---
import { LOCALE, SITE, GA_CONFIG } from "@config";
import "@styles/base.css";
import { ViewTransitions } from "astro:transitions";
import GoogleAnalytics from "@components/GoogleAnalytics.astro";

const googleSiteVerification = import.meta.env.PUBLIC_GOOGLE_SITE_VERIFICATION;

export interface Props {
  title?: string;
  author?: string;
  description?: string;
  ogImage?: string;
  canonicalURL?: string;
  pubDate?: Date;
  modDate?: Date | null;
  scrollSmooth?: boolean;
}

const {
  title = SITE.title,
  author = SITE.author,
  description = SITE.desc,
  ogImage = SITE.ogImage,
  canonicalURL = new URL(Astro.url.pathname, Astro.site).href,
  pubDate,
  modDate,
  scrollSmooth = false,
} = Astro.props;

const socialImageURL = new URL(
  ogImage ?? SITE.ogImage ?? "og.png",
  Astro.url.origin
).href;
---

<!doctype html>
<html
  lang=`${LOCALE.lang ?? "en"}`
  class={`${scrollSmooth && "scroll-smooth"}`}
>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />

    <!-- General Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />

    <!-- Open Graph / Facebook -->
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Article Published/Modified time -->
    {
      pubDate && (
        <meta
          property="article:published_time"
          content={pubDate.toISOString()}
        />
      )
    }
    {
      modDate && (
        <meta
          property="article:modified_time"
          content={modDate.toISOString()}
        />
      )
    }

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta property="twitter:title" content={title} />
    <meta property="twitter:description" content={description} />
    <meta property="twitter:image" content={socialImageURL} />

    <meta name="theme-color" content="" />

    {
      // If PUBLIC_GOOGLE_SITE_VERIFICATION is set in the environment variable,
      // include google-site-verification tag in the heading
      // Learn more: https://support.google.com/webmasters/answer/9008080#meta_tag_verification&zippy=%2Chtml-tag
      googleSiteVerification && (
        <meta
          name="google-site-verification"
          content={googleSiteVerification}
        />
      )
    }

    <ViewTransitions />
  </head>
  <body>
    <slot />
    {GA_CONFIG.id && GA_CONFIG.enable && <GoogleAnalytics id={GA_CONFIG.id} />}
    <script is:inline>
      const primaryColorScheme = ""; // "light" | "dark"

      // Get theme data from local storage
      const currentTheme = localStorage.getItem("theme");

      function getPreferTheme() {
        // return theme value in local storage if it is set
        if (currentTheme) return currentTheme;

        // return primary color scheme if it is set
        if (primaryColorScheme) return primaryColorScheme;

        // return user device's prefer color scheme
        return window.matchMedia("(prefers-color-scheme: dark)").matches
          ? "dark"
          : "light";
      }

      let themeValue = getPreferTheme();

      function setPreference() {
        localStorage.setItem("theme", themeValue);
        reflectPreference();
      }

      function reflectPreference() {
        document.firstElementChild.setAttribute("data-theme", themeValue);

        document
          .querySelector("#theme-btn")
          ?.setAttribute("aria-label", themeValue);

        // Get a reference to the body element
        const body = document.body;

        // Check if the body element exists before using getComputedStyle
        if (body) {
          // Get the computed styles for the body element
          const computedStyles = window.getComputedStyle(body);

          // Get the background color property
          const bgColor = computedStyles.backgroundColor;

          // Set the background color in <meta theme-color ... />
          document
            .querySelector("meta[name='theme-color']")
            ?.setAttribute("content", bgColor);
        }
      }

      // set early so no page flashes / CSS is made aware
      reflectPreference();

      window.onload = () => {
        function setThemeFeature() {
          // set on load so screen readers can get the latest value on the button
          reflectPreference();

          // now this script can find and listen for clicks on the control
          document
            .querySelector("#theme-btn")
            ?.addEventListener("click", () => {
              themeValue = themeValue === "light" ? "dark" : "light";
              setPreference();
            });
        }

        setThemeFeature();

        // Runs on view transitions navigation
        document.addEventListener("astro:after-swap", setThemeFeature);
      };

      // sync with system changes
      window
        .matchMedia("(prefers-color-scheme: dark)")
        .addEventListener("change", ({ matches: isDark }) => {
          themeValue = isDark ? "dark" : "light";
          setPreference();
        });
    </script>
  </body>
</html>
