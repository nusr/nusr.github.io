---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import FormatDate from "@components/FormatDate";
import type { CollectionEntry } from "astro:content";
import { slugifyStr } from "@utils/slugify";
import ShareLink from "@components/ShareLink.astro";
import { SITE } from "@config";
import countReadTime, { extractTOC } from "@utils/countReadTime";
import Comment from "@components/Comment.astro";
import BackToTop from "@components/BackToTop.astro";
import TOC from "@components/TOC.astro";

export interface Props {
  post: CollectionEntry<"blog">;
}

const { post } = Astro.props;

const {
  title,
  author,
  ogImage,
  canonicalURL,
  pubDate,
  modDate,
  tags,
  description,
} = post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(
  ogImageUrl ?? `/posts/${slugifyStr(title)}.png`,
  Astro.url.origin
).href;
const readTime = countReadTime(post.body);
const tocList = extractTOC(post.body);

const layoutProps = {
  title: `${title} | ${SITE.title}`,
  author,
  description,
  pubDate,
  modDate,
  canonicalURL,
  ogImage: ogUrl,
  scrollSmooth: true,
};
---

<Layout {...layoutProps}>
  <Header />

  <main id="main-content">
    <h1 transition:name={slugifyStr(title)} class="post-title">{title}</h1>
    <div class="my-2 flex items-center">
      <FormatDate pubDate={pubDate} modDate={modDate} size="lg" />
      {
        readTime > 0 && (
          <div class="pl-4 text-base opacity-80">{readTime} min read</div>
        )
      }
    </div>
    <ul class="mb-4">
      {tags.map(tag => <Tag tag={slugifyStr(tag)} tagName={tag} />)}
    </ul>
    <article id="article" role="article" class="prose mx-auto max-w-3xl">
      <Content />
    </article>

    <div
      class="my-6 flex flex-col-reverse items-center justify-between gap-6 sm:flex-row-reverse sm:items-end sm:gap-4"
    >
      <BackToTop />
      <ShareLink />
    </div>
    <Comment />
  </main>
  <div class="toc-container init bg-skin-fill" id="toc-menu">
    <TOC toc={tocList} isSort />
  </div>
  <Footer />
</Layout>

<style>
  main {
    @apply relative mx-auto w-full max-w-3xl px-4 pb-12;
  }
  .post-title {
    @apply mt-6 text-2xl font-semibold text-skin-accent;
  }
  .toc-container {
    right: 0;
    z-index: 3;
    width: 200px;
  }
  @media screen and (max-width: 1136px) {
    .toc-container {
      display: none;
    }
  }
  .toc-container.init {
    top: 129px;
    position: absolute;
  }
  .toc-container.init.scroll {
    top: 0;
    position: fixed;
  }
</style>

<script is:inline>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-skin-fill";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-skin-accent";
    progressBar.id = "_progress_bar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();
  function updateToc(winScroll) {
    const dom = document.querySelector("#toc-menu");
    if (dom) {
      dom.classList.toggle("scroll", winScroll > 129);
    }
  }
  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    const winScroll =
      document.body.scrollTop || document.documentElement.scrollTop;
    const height =
      document.documentElement.scrollHeight -
      document.documentElement.clientHeight;
    const scrolled = (winScroll / height) * 100;
    if (document) {
      const dom = document.getElementById("_progress_bar");
      if (dom) {
        dom.style.width = scrolled + "%";
      }
    }
    updateToc(winScroll);
  }

  document.addEventListener("scroll", updateScrollProgress);

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    let headings = Array.from(document.querySelectorAll("h2, h3, h4, h5, h6"));
    for (let heading of headings) {
      heading.classList.add("group");
      let link = document.createElement("a");
      link.innerText = "#";
      link.className = "heading-link hidden group-hover:inline-block ml-2";
      link.href = "#" + heading.id;
      link.ariaHidden = "true";
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Attaches copy buttons to code blocks in the document,
   * allowing users to copy code easily. */
  function attachCopyButtons() {
    let copyButtonLabel = "Copy";
    let codeBlocks = Array.from(document.querySelectorAll("pre"));

    for (let codeBlock of codeBlocks) {
      let wrapper = document.createElement("div");
      wrapper.style.position = "relative";

      let copyButton = document.createElement("button");
      copyButton.className =
        "copy-code absolute right-3 -top-3 rounded bg-skin-card px-2 py-1 text-xs leading-4 text-skin-base font-medium";
      copyButton.innerHTML = copyButtonLabel;
      codeBlock.setAttribute("tabindex", "0");
      codeBlock.appendChild(copyButton);

      // wrap codebock with relative parent element
      codeBlock?.parentNode?.insertBefore(wrapper, codeBlock);
      wrapper.appendChild(codeBlock);

      copyButton.addEventListener("click", async () => {
        await copyCode(codeBlock, copyButton);
      });
    }

    async function copyCode(block, button) {
      let code = block.querySelector("code");
      let text = code?.innerText;

      await navigator.clipboard.writeText(text ?? "");

      // visual feedback that task is completed
      button.innerText = "Copied";

      setTimeout(() => {
        button.innerText = copyButtonLabel;
      }, 700);
    }
  }
  attachCopyButtons();
</script>
